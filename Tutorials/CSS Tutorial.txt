CASCADING STYLE SHEETS 
    - used to style website(.html)

<style>

</style>



USE INLINE STYLES TO CHANGE COLOR OF TEXT:
    <p style="color: red">Red text</p>
    <h2 style="color: red">Red text</h2>

USE CSS SELECTORS TO STYLE ELEMENTS:
    <style>
        p {color: red}
        h2 {color:blue}
    </style>

        - this makes all <p> red and all <h2> blue

USE CSS CLASS TO STYLE AN ELEMENT:
    <style>
    .blue-text {color: blue;}
    </style>
    <p class=blue-text>Just some text</p>

        - you can add "class=blue-text" to elements that have class of 
        blue text to make them blue
        - you dont use "." in actual elements, just up in style to 
        define that its a class
        - you can use these class on multiple elements

CHANGE THE FONT SIZE OF AN ELEMENT:
    <style>
        .red-text{
            color: red;
            font-size:30px;
        }
    </style>
        - everything that uses "class="red-text"" will be 30px big
    -----------------------------------------------------------------
    <style>
        p {
            font-size: 16px
        }
    </style>
        - all paragraphs will be 16px big

SET THE FONT FAMILY OF AN ELEMENT:
    <style>
        p{
            font-family: monospace;
        }
    </style>
        - all paragraphs will be in "monospace" font

IMPORT A GOOGLE FONT
    Using https://fonts.google.com/
    
    <link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">
    <style>
        h2{
            font-family: Lobster, monospace;
        }
    </style>

        - uses "Lobster" font to all h2
        - if browser cant get "Lobster", it uses "monospace" as default
        font

SIZE YOUR IMAGES:
    "width" in CSS can control elements width - image, div, paragraph
    <style>
        .larger-image {
            width:500px;
        }
    </style>
        - anything with class larger image will be 500px wide

ADD BORDERS AROUND YOUR ELEMENTS:
    <style>
        .thick-green-border{
            border-color: green;
            border-width: 10px;
            border-style: solid;
        }
    </style>
    
        - <p class="red-text thick-green-border">
        - example of using more classes in one element - just put 
        a space between 2 elements

ADD ROUNDED CORNERS WITH BORDER-RADIUS:
    <style>
        .thick-green-border{
            border-color: green;
            border-width: 10px;
            border-style: solid;
            border-radius:10px;
        }
    </style>

MAKE CIRCULAR IMAGES WITH A BORDER-RADIUS:
    <style>
        .thick-green-border{
            border-color: green;
            border-width: 10px;
            border-style: solid;
            border-radius: 50%;
        }
    </style>

GIVE A BACKGROUND COLOR TO A DIV ELEMENT:
    <style>
        .silver-background {
            background-color: silver;
        }
    </style>
        - you also need to apply it somewhere to show up

SET THE ID OF AN ELEMENT & STYLING ID's:
    - ID is similar to class, but every element can have just 1 ID
    - you can use ID to style elements or reference it in JS
    - define ID with "#" (class was defined with ".")
    - ID has higher priority than a class, so if 1 element has 
    for example red color from class and blue color from ID, on our
    webpage it will be blue, because it has higher priority

    <style>
        #heading {
            color: green;
        }
    </style>
    <h2 id="heading">

ADJUST THE PADDING & MARGIN OF AN ELEMENT:
    - elements border controls amount of space between border and 
    surrounding elements
    - you can give negative margin to an element to make them big
    
    
    <style>
        .injected-text {
            margin-bottom: -25px;
            text-align: center;
        }
        
        .box {
            border-style: solid;
            border-color: black;
            border-width: 5px;
            text-align: center;
        }

        .yellow-box {
            background-color: yellow;
            padding: 10px;
        }

        .red-box{
            background-color:crimson;
            color: #fff;
            padding: 20px;
            margin: 20px;
        }

        .blue-box{
            background-color: blue;
            color: #fff;
            padding: 20px;
            margin: 20px;
        }


    </style>

ADD DIFFERENT PADDING & MARGINS TO EACH SIDE OF AN ELEMENT:
    <style>
        .red-box{
            background-color: crimson;
            color: #fff
            padding-top: 40px
            padding-right: 20px;
            padding-bottom: 20x;
            padding-left: 40px;
            margin-top: 40px
            margin-right: 20px;
            margin-bottom: 20x;
            margin-left: 40px;
        }
    </style>

USE CLOCKWISE NOTATION TO SPECIFY THE PADDING & MARGIN OF AN ELEMENT:
    - to "padding" and/or "margin" type all 4 numbers in clockwise order 
    (top, right, bottom, left)
    
    <style>
        .red-box
            background-color: crimson;
            color: #fff
            padding: 20px 40px 40px 20px;
            margin: 20px 40px 40px 20px;
    </style>

USE ATTRIBUTE SELECTORS TO STYLE ELEMENT:
    <style>
        [type="radio"] {
            margin: 20px
        }
    </style>
        - every "radio" form has margin 20px
        - if you want to set top and bottom margins, you can use:
            margin-top: 10px; margin-bottom: 10px,
        or:
            margin: 10px 0px 10px 0px;

UNDERSTANDING ABSOLUTE vs. RELATIVE UNITS:
    - 10px - absolute unit
    - em - relative unit; 2em = 2 times the size of current font
    - % - relative to parent element
    
    <style>
        .red-box {
            background-color: red;
            margin: 20px 40px 20px 40px
            padding: 1.5em;
        }

    </style>

STYLE THE HTML BODY ELEMENT, INHERIT STYLES FROM THE BODY ELEMENT:
    - everything that youll apply to element, will also apply to all
    lower elements/elements that are inside
    <style>
        body {
            background-color: black;
            color: blue;
            font-family: monospace;
        }
    </style>
    <h1>Hello world</h1>


PRIORIZE ONE STYLE OVER ANOTHER:
    <style>
        body {
            background-color: black;
            color: blue;
            font-family: monospace;
        }
        .pink-text {
            color:pink;
        }
    </style>
    <h1 class="pink-text">Hello world</h1>

        - text will have pink text, because its more specific,
        in <h1> we have used class, but we didnt used body,
        so it has higher priority
        - whatever is closes to the text "Hello world" is gonna be
        printed

OVERRIDE STYLES IN SUBSEQUENT CSS:
    <style>
        body {
            background-color: black;
            color: blue;
            font-family: monospace;
        }
        .pink-text {
            color:pink;
        }
        .blue-text {
            color:blue;
        }
    </style>
    <h1 class="pink-text blue-text">Hello world</h1>
        - our text is gonna be blue, because order matters,
        but not order in <h1>, but order in <style>
        - in <style>, if .pink-text was under .blue-text, 
        text in our webpage will be pink

OVERRIDE CLASS DECLARATIONS BY STYLING ID ATTRIBUTES:
    <style>
        body {
            background-color: black;
            color: blue;
            font-family: monospace;
        }

        #orange-text {
            color:orange;
        }

        .pink-text {
            color:pink;
        }
        .blue-text {
            color:blue;
        }
    </style>
    <h1 class="pink-text blue-text" id="orange-text">Hello world</h1>
        - we can override "body" style with making it more specific
        and put .pink-text in <h1>, and we can override .pink-text
        with .blue-text by putting it under .pink-text in <style>
        - we can override all classes by adding an ID
        - if we are defining an ID, order doesnt matter because 
        ID has higher priority than any class

OVERRIDE CLASS DECLARATIONS WITH INLINE STYLES:
    <style>
        body {
            background-color: black;
            color: blue;
            font-family: monospace;
        }

        #orange-text {
            color:orange;
        }

        .pink-text {
            color:pink;
        }
        .blue-text {
            color:blue;
        }
    </style>
    <h1 class="pink-text blue-text" id="orange-text" style="color:white">Hello world</h1>
        - you can override both classes and ID with inline style, 
        because they are even more specific

OVERRIDE ALL OTHER STYLES BY USING IPORTANT:
    <style>
        body {
            background-color: black;
            color: blue;
            font-family: monospace;
        }

        #orange-text {
            color:orange;
        }

        .pink-text {
            color:pink;
        }
        .blue-text {
            color:blue;
        }
        .purple-text{
            color:purple !important;
        }
    </style>
    <h1 class="pink-text blue-text" id="orange-text" style="color:white">
        Hello world
    </h1>
        - using !important after color:purple we made the most specific,
        most important thing ever created and our text will be purple

        - so, the color of overriding is following
        (least to most important):
            - classes in <style> that are on top
            - classes in <style> that are on bottom
            - ID's 
            - classes with !important


USE HEX CODE FOR SPECIFIC COLORS & MIXING COLORS:
    <style>
        body {
            background-color: #000000; 
        }
    </style>
        - in hex code; 1st 2 zeros stands for red, 
        2nd 2 zeros stands for greed,
        3rd 2 zeros stands for blue

        - #FF0000 for red; #00FF00 for green; #0000FF for blue

USE ABBREVIATED HEX CODE:
    - if hex code has 3 sets of same digits, we can use just 1st digit
    from set
        - #FF0000 -> #F00

USE RGB VALUES TO COLOR ELEMENTS:
    <style>
        body {
            background-color: rgb(255, 0, 0); 
        }
    </style>
        - you can mix RGB the same way as HEX (or similar at least)

CREATE A CUSTOM CSS VARIABLE:
    <style>
        .penguin {
            --penguin-skin: gray;
        }
        with "grey"
    </style>
        - use "--" to make a variable
        - everytime when we'll use this variable, its gonna be replaced
        with "grey"

ATTACH A FALLBACK VALUE TO A CSS VARIABLE:
    <style>
        .penguin {
            --penguin-skin: gray;
        }
        with "grey"
        background: var(--penguin-skin);
    </style>

IMPROVE COMPATIBILITY WITH BROWSER FALLBACKS:
    - variables can have fallback values attached, if for some reason it 
    wont work (using older browser, wrong spelling,...)
    background: var(--penguin-skin, black);    

CASCADING CSS VARIABLES:
    


position: 
    relative - if offset is set, the element moves to x px from current position
    absolute - locking element to parents element
    fixed - fixed to browser window

z-index: 
    - in css; controls which element is displayed on top
    - value has to be integer

    <style> 
        .second{z-index: 1} 
        .first{z-index: 2}
    </style>

    - "first" will be on top of "second"

linear-gradient:
    background: linear-gradient(gradient_direction, color 1, color 2, color 3, ...);
    background: linear-gradient(35deg, #CCFFFF, #FFCCCC)

repeating-linear-gradient:
    background: repeating-linear-gradient(
        45deg,
        yellow 0px,
        yellow 40px,
        black 40px,
        black 80px

transform: scale(1.5);
    - makes something 1.5 times bigger

hover:
    div:hover{
        transform: scale(1.1)
    }

    - while youre on div with cursor, its gonna be 1.1 times bigger

skew:
    transform: skewX(24deg);
    transform: skewY(-10deg);

box-shadow:
    offset-x, offset-y, *blur-radius, *spread-radius, color
    *optional
    
    box-shadow: 25px 10px 0px 0px blue;

animations: 
    example1
        #anim {
            animation-name: colorful;
            animation-duration: 3s;
        }

        @keyframes colorful {
            0% {
                background-color: blue;
            }
            100% {
                background-color: yellow;
            }
        }
    example2
        <style>
            img:hover {
                animation-name: width;
                animation-duration: 500ms;
            }

            @keyframes width {
                100% {
                width: 40px;
                }
            }
            </style>

            <img src="https://bit.ly/smallgooglelogo" alt="Google's Logo" />

    animation-iteration-count: 3;
    animation-iteration-count: infinite;

    animation-timing-function: linear;
    animation-timing-function: ease;
    animation-timing-function: ease-in;
    animation-timing-function: ease-out;

    animation-timing-function: cubic-bezier(0.25, 0.25, 0.75, 0.75);
        (x1, y1, x2, y2)
        x1, y1 - starting coordinates
        x2, y2 - ending coordinates


media query
    - shows content differently on devices with different display resolution

    @media (max-width: 100px) { /* CSS Rules */ }
    @media (min-height: 350px) { /* CSS Rules */ }

responsive images
    - adjusts image's size automatically
    
    .responsive-image {
        max-width: 100%;
        height: auto;
    }

css flexbox
    #box-container{
        display: flex;
        flex-direction: row;
        flex-direction: row-reverse;
        flex-direction: column;
    }



UNITS
    absolute
        cm, mm, in 
        px = pixels
        pt = points
        pc = picas
    relative
        em - font-size of element
        ex - x-height of the current font (rarely used)
        ch - width of "0" (zero)
        rem - font size of the root element
        vw - 1% of viewport width
        vh - 1% of viewport height
        vmin - 1% of viewport's smaller dimension
        vmax - 1% of viewport's larger dimension
        % - relative to parent element




















































